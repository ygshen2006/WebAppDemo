#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyDB")]
	public partial class SQLOperationsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertIntrestType(IntrestType instance);
    partial void UpdateIntrestType(IntrestType instance);
    partial void DeleteIntrestType(IntrestType instance);
    partial void InsertTeamType(TeamType instance);
    partial void UpdateTeamType(TeamType instance);
    partial void DeleteTeamType(TeamType instance);
    partial void InsertTeamSite(TeamSite instance);
    partial void UpdateTeamSite(TeamSite instance);
    partial void DeleteTeamSite(TeamSite instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    partial void InsertReportStatus(ReportStatus instance);
    partial void UpdateReportStatus(ReportStatus instance);
    partial void DeleteReportStatus(ReportStatus instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertReportOwner(ReportOwner instance);
    partial void UpdateReportOwner(ReportOwner instance);
    partial void DeleteReportOwner(ReportOwner instance);
    #endregion
		
		public SQLOperationsDataContext() : 
				base(global::Models.Properties.Settings.Default.MyDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SQLOperationsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLOperationsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLOperationsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLOperationsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<IntrestType> IntrestTypes
		{
			get
			{
				return this.GetTable<IntrestType>();
			}
		}
		
		public System.Data.Linq.Table<TeamType> TeamTypes
		{
			get
			{
				return this.GetTable<TeamType>();
			}
		}
		
		public System.Data.Linq.Table<TeamSite> TeamSites
		{
			get
			{
				return this.GetTable<TeamSite>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
		
		public System.Data.Linq.Table<ReportStatus> ReportStatus
		{
			get
			{
				return this.GetTable<ReportStatus>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ReportOwner> ReportOwners
		{
			get
			{
				return this.GetTable<ReportOwner>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IntrestType")]
	public partial class IntrestType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _IntrestName;
		
		private EntitySet<TeamType> _TeamTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIntrestNameChanging(string value);
    partial void OnIntrestNameChanged();
    #endregion
		
		public IntrestType()
		{
			this._TeamTypes = new EntitySet<TeamType>(new Action<TeamType>(this.attach_TeamTypes), new Action<TeamType>(this.detach_TeamTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntrestName", DbType="NVarChar(50)")]
		public string IntrestName
		{
			get
			{
				return this._IntrestName;
			}
			set
			{
				if ((this._IntrestName != value))
				{
					this.OnIntrestNameChanging(value);
					this.SendPropertyChanging();
					this._IntrestName = value;
					this.SendPropertyChanged("IntrestName");
					this.OnIntrestNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IntrestType_TeamType", Storage="_TeamTypes", ThisKey="Id", OtherKey="IntrestTypeId")]
		public EntitySet<TeamType> TeamTypes
		{
			get
			{
				return this._TeamTypes;
			}
			set
			{
				this._TeamTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamTypes(TeamType entity)
		{
			this.SendPropertyChanging();
			entity.IntrestType = this;
		}
		
		private void detach_TeamTypes(TeamType entity)
		{
			this.SendPropertyChanging();
			entity.IntrestType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamTypes")]
	public partial class TeamType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _TeamId;
		
		private System.Nullable<int> _IntrestTypeId;
		
		private EntityRef<IntrestType> _IntrestType;
		
		private EntityRef<TeamSite> _TeamSite;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTeamIdChanging(System.Nullable<int> value);
    partial void OnTeamIdChanged();
    partial void OnIntrestTypeIdChanging(System.Nullable<int> value);
    partial void OnIntrestTypeIdChanged();
    #endregion
		
		public TeamType()
		{
			this._IntrestType = default(EntityRef<IntrestType>);
			this._TeamSite = default(EntityRef<TeamSite>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="Int")]
		public System.Nullable<int> TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._TeamSite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntrestTypeId", DbType="Int")]
		public System.Nullable<int> IntrestTypeId
		{
			get
			{
				return this._IntrestTypeId;
			}
			set
			{
				if ((this._IntrestTypeId != value))
				{
					if (this._IntrestType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIntrestTypeIdChanging(value);
					this.SendPropertyChanging();
					this._IntrestTypeId = value;
					this.SendPropertyChanged("IntrestTypeId");
					this.OnIntrestTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IntrestType_TeamType", Storage="_IntrestType", ThisKey="IntrestTypeId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public IntrestType IntrestType
		{
			get
			{
				return this._IntrestType.Entity;
			}
			set
			{
				IntrestType previousValue = this._IntrestType.Entity;
				if (((previousValue != value) 
							|| (this._IntrestType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IntrestType.Entity = null;
						previousValue.TeamTypes.Remove(this);
					}
					this._IntrestType.Entity = value;
					if ((value != null))
					{
						value.TeamTypes.Add(this);
						this._IntrestTypeId = value.Id;
					}
					else
					{
						this._IntrestTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("IntrestType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamSite_TeamType", Storage="_TeamSite", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public TeamSite TeamSite
		{
			get
			{
				return this._TeamSite.Entity;
			}
			set
			{
				TeamSite previousValue = this._TeamSite.Entity;
				if (((previousValue != value) 
							|| (this._TeamSite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamSite.Entity = null;
						previousValue.TeamTypes.Remove(this);
					}
					this._TeamSite.Entity = value;
					if ((value != null))
					{
						value.TeamTypes.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TeamSite");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamSites")]
	public partial class TeamSite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TeamGUID;
		
		private string _Name;
		
		private string _Description;
		
		private int _TeamOwner;
		
		private string _TeamLogo;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private EntitySet<TeamType> _TeamTypes;
		
		private EntitySet<Report> _Reports;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTeamGUIDChanging(string value);
    partial void OnTeamGUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTeamOwnerChanging(int value);
    partial void OnTeamOwnerChanged();
    partial void OnTeamLogoChanging(string value);
    partial void OnTeamLogoChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public TeamSite()
		{
			this._TeamTypes = new EntitySet<TeamType>(new Action<TeamType>(this.attach_TeamTypes), new Action<TeamType>(this.detach_TeamTypes));
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamGUID", DbType="NVarChar(50)")]
		public string TeamGUID
		{
			get
			{
				return this._TeamGUID;
			}
			set
			{
				if ((this._TeamGUID != value))
				{
					this.OnTeamGUIDChanging(value);
					this.SendPropertyChanging();
					this._TeamGUID = value;
					this.SendPropertyChanged("TeamGUID");
					this.OnTeamGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamOwner", DbType="Int NOT NULL")]
		public int TeamOwner
		{
			get
			{
				return this._TeamOwner;
			}
			set
			{
				if ((this._TeamOwner != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamOwnerChanging(value);
					this.SendPropertyChanging();
					this._TeamOwner = value;
					this.SendPropertyChanged("TeamOwner");
					this.OnTeamOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamLogo", DbType="NVarChar(200)")]
		public string TeamLogo
		{
			get
			{
				return this._TeamLogo;
			}
			set
			{
				if ((this._TeamLogo != value))
				{
					this.OnTeamLogoChanging(value);
					this.SendPropertyChanging();
					this._TeamLogo = value;
					this.SendPropertyChanged("TeamLogo");
					this.OnTeamLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamSite_TeamType", Storage="_TeamTypes", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<TeamType> TeamTypes
		{
			get
			{
				return this._TeamTypes;
			}
			set
			{
				this._TeamTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamSite_Report", Storage="_Reports", ThisKey="Id", OtherKey="TeamSiteId")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TeamSite", Storage="_User", ThisKey="TeamOwner", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TeamSites.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TeamSites.Add(this);
						this._TeamOwner = value.Id;
					}
					else
					{
						this._TeamOwner = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamTypes(TeamType entity)
		{
			this.SendPropertyChanging();
			entity.TeamSite = this;
		}
		
		private void detach_TeamTypes(TeamType entity)
		{
			this.SendPropertyChanging();
			entity.TeamSite = null;
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.TeamSite = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.TeamSite = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reports")]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Description;
		
		private string _FeaturedPicture;
		
		private string _OtherPics;
		
		private int _TeamSiteId;
		
		private System.Nullable<bool> _IsDeleted;
		
		private int _ReportStatusId;
		
		private string _StatusComment;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<ReportOwner> _ReportOwners;
		
		private EntityRef<TeamSite> _TeamSite;
		
		private EntityRef<ReportStatus> _ReportStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFeaturedPictureChanging(string value);
    partial void OnFeaturedPictureChanged();
    partial void OnOtherPicsChanging(string value);
    partial void OnOtherPicsChanged();
    partial void OnTeamSiteIdChanging(int value);
    partial void OnTeamSiteIdChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnReportStatusIdChanging(int value);
    partial void OnReportStatusIdChanged();
    partial void OnStatusCommentChanging(string value);
    partial void OnStatusCommentChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Report()
		{
			this._ReportOwners = new EntitySet<ReportOwner>(new Action<ReportOwner>(this.attach_ReportOwners), new Action<ReportOwner>(this.detach_ReportOwners));
			this._TeamSite = default(EntityRef<TeamSite>);
			this._ReportStatus = default(EntityRef<ReportStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeaturedPicture", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string FeaturedPicture
		{
			get
			{
				return this._FeaturedPicture;
			}
			set
			{
				if ((this._FeaturedPicture != value))
				{
					this.OnFeaturedPictureChanging(value);
					this.SendPropertyChanging();
					this._FeaturedPicture = value;
					this.SendPropertyChanged("FeaturedPicture");
					this.OnFeaturedPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherPics", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string OtherPics
		{
			get
			{
				return this._OtherPics;
			}
			set
			{
				if ((this._OtherPics != value))
				{
					this.OnOtherPicsChanging(value);
					this.SendPropertyChanging();
					this._OtherPics = value;
					this.SendPropertyChanged("OtherPics");
					this.OnOtherPicsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamSiteId", DbType="Int NOT NULL")]
		public int TeamSiteId
		{
			get
			{
				return this._TeamSiteId;
			}
			set
			{
				if ((this._TeamSiteId != value))
				{
					if (this._TeamSite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamSiteIdChanging(value);
					this.SendPropertyChanging();
					this._TeamSiteId = value;
					this.SendPropertyChanged("TeamSiteId");
					this.OnTeamSiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportStatusId", DbType="Int NOT NULL")]
		public int ReportStatusId
		{
			get
			{
				return this._ReportStatusId;
			}
			set
			{
				if ((this._ReportStatusId != value))
				{
					if (this._ReportStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportStatusIdChanging(value);
					this.SendPropertyChanging();
					this._ReportStatusId = value;
					this.SendPropertyChanged("ReportStatusId");
					this.OnReportStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusComment", DbType="NVarChar(MAX)")]
		public string StatusComment
		{
			get
			{
				return this._StatusComment;
			}
			set
			{
				if ((this._StatusComment != value))
				{
					this.OnStatusCommentChanging(value);
					this.SendPropertyChanging();
					this._StatusComment = value;
					this.SendPropertyChanged("StatusComment");
					this.OnStatusCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportOwner", Storage="_ReportOwners", ThisKey="Id", OtherKey="ReportId")]
		public EntitySet<ReportOwner> ReportOwners
		{
			get
			{
				return this._ReportOwners;
			}
			set
			{
				this._ReportOwners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamSite_Report", Storage="_TeamSite", ThisKey="TeamSiteId", OtherKey="Id", IsForeignKey=true)]
		public TeamSite TeamSite
		{
			get
			{
				return this._TeamSite.Entity;
			}
			set
			{
				TeamSite previousValue = this._TeamSite.Entity;
				if (((previousValue != value) 
							|| (this._TeamSite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamSite.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._TeamSite.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._TeamSiteId = value.Id;
					}
					else
					{
						this._TeamSiteId = default(int);
					}
					this.SendPropertyChanged("TeamSite");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportStatus_Report", Storage="_ReportStatus", ThisKey="ReportStatusId", OtherKey="Id", IsForeignKey=true)]
		public ReportStatus ReportStatus
		{
			get
			{
				return this._ReportStatus.Entity;
			}
			set
			{
				ReportStatus previousValue = this._ReportStatus.Entity;
				if (((previousValue != value) 
							|| (this._ReportStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportStatus.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._ReportStatus.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._ReportStatusId = value.Id;
					}
					else
					{
						this._ReportStatusId = default(int);
					}
					this.SendPropertyChanged("ReportStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportOwners(ReportOwner entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_ReportOwners(ReportOwner entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportStatus")]
	public partial class ReportStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Status;
		
		private EntitySet<Report> _Reports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public ReportStatus()
		{
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportStatus_Report", Storage="_Reports", ThisKey="Id", OtherKey="ReportStatusId")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.ReportStatus = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.ReportStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Password;
		
		private string _Mail;
		
		private string _DisplayName;
		
		private EntitySet<TeamSite> _TeamSites;
		
		private EntitySet<ReportOwner> _ReportOwners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    #endregion
		
		public User()
		{
			this._TeamSites = new EntitySet<TeamSite>(new Action<TeamSite>(this.attach_TeamSites), new Action<TeamSite>(this.detach_TeamSites));
			this._ReportOwners = new EntitySet<ReportOwner>(new Action<ReportOwner>(this.attach_ReportOwners), new Action<ReportOwner>(this.detach_ReportOwners));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mail", DbType="NVarChar(50)")]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(50)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TeamSite", Storage="_TeamSites", ThisKey="Id", OtherKey="TeamOwner")]
		public EntitySet<TeamSite> TeamSites
		{
			get
			{
				return this._TeamSites;
			}
			set
			{
				this._TeamSites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ReportOwner", Storage="_ReportOwners", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<ReportOwner> ReportOwners
		{
			get
			{
				return this._ReportOwners;
			}
			set
			{
				this._ReportOwners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamSites(TeamSite entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TeamSites(TeamSite entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ReportOwners(ReportOwner entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ReportOwners(ReportOwner entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportOwner")]
	public partial class ReportOwner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _ReportId;
		
		private EntityRef<Report> _Report;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnReportIdChanging(int value);
    partial void OnReportIdChanged();
    #endregion
		
		public ReportOwner()
		{
			this._Report = default(EntityRef<Report>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportId", DbType="Int NOT NULL")]
		public int ReportId
		{
			get
			{
				return this._ReportId;
			}
			set
			{
				if ((this._ReportId != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIdChanging(value);
					this.SendPropertyChanging();
					this._ReportId = value;
					this.SendPropertyChanged("ReportId");
					this.OnReportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportOwner", Storage="_Report", ThisKey="ReportId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.ReportOwners.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.ReportOwners.Add(this);
						this._ReportId = value.Id;
					}
					else
					{
						this._ReportId = default(int);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ReportOwner", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ReportOwners.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ReportOwners.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
